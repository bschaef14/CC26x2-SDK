<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys" kind="struct" language="C++" prot="public">
    <compoundname>ECJPAKE_OperationRoundTwoGenerateKeys</compoundname>
    <includes refid="_e_c_j_p_a_k_e_8h" local="no">ECJPAKE.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a70378dcb290f2d4032d667bb37975ab8" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_e_c_c_params___curve_params" kindref="compound">ECCParams_CurveParams</ref> *</type>
        <definition>const ECCParams_CurveParams* ECJPAKE_OperationRoundTwoGenerateKeys::curve</definition>
        <argsstring></argsstring>
        <name>curve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the elliptic curve parameters used in the operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="936" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a9e7e5b0765e81c7b8021242dae006231" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myPrivateKey2</definition>
        <argsstring></argsstring>
        <name>myPrivateKey2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a private ECC key. Must be of the same length as other params of the curve used. Generated in round one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="939" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a2a9a1eff4321e488d979b01b69a4c5ca" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myPublicKey1</definition>
        <argsstring></argsstring>
        <name>myPublicKey1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the public key of myPrivateKey1. Generated in round one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="943" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1ad67d4498895c39c520fc89af43411cbd" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myPublicKey2</definition>
        <argsstring></argsstring>
        <name>myPublicKey2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the second public key. Generated in round one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="946" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aa56b66dd17b7788d4a092c08c0fc526d" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::theirPublicKey1</definition>
        <argsstring></argsstring>
        <name>theirPublicKey1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> describing the first public key received from the other party. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="949" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a7b26f89a9ff6c4991231cacfa2834fb5" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::theirPublicKey2</definition>
        <argsstring></argsstring>
        <name>theirPublicKey2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> describing the second public key received from the other party. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="952" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1af056028d0089252d89d1413e9950e39c" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::preSharedSecret</definition>
        <argsstring></argsstring>
        <name>preSharedSecret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> describing the secret shared between the two parties prior to starting the scheme. This exchange would have happened through some offline commissioning scheme most likely. The driver expects an integer of the same length as the curve parameters of the curve in use as keying material even if the original pre-shared secret is shorter than this length. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="955" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a79021d246ce8e6603f987502e1c306d1" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::theirNewGenerator</definition>
        <argsstring></argsstring>
        <name>theirNewGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blank <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> describing the generator point used by the other party in the second round. After it is computed, the keying material will be written to the location described in the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Formatted as a public key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="964" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aad7c70af8f88da28262eae66c2606196" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myNewGenerator</definition>
        <argsstring></argsstring>
        <name>myNewGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blank <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> describing the generator point used by the application in the second round. After it is computed, the keying material will be written to the location described in the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Formatted as a public key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="971" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1ae3b22eb15838cffb4469dae238bd103f" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myCombinedPrivateKey</definition>
        <argsstring></argsstring>
        <name>myCombinedPrivateKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a public ECC key. Must be of the same length as other params of the curve used. Result of multiplying <computeroutput>myCombinedPrivateKey</computeroutput> by <computeroutput>myNewGenerator</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="978" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a5be4dc8d025e3f195b9ca9467d891e2f" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myCombinedPublicKey</definition>
        <argsstring></argsstring>
        <name>myCombinedPublicKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a public ECC key. Result of multiplying <computeroutput>myCombinedPrivateKey</computeroutput> by <computeroutput>myNewGenerator</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="983" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aeb7a4d170ee355be0201d4b246a73a88" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myPrivateV</definition>
        <argsstring></argsstring>
        <name>myPrivateV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a private ECC key used in the only second-round Schnorr ZKP. Must be of the same length as other params of the curve used. The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> and keying material may be deleted or go out of scope after generating the ZKP. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="986" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a8d31da90d614deb245c6ef35ab9ea795" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECJPAKE_OperationRoundTwoGenerateKeys::myPublicV</definition>
        <argsstring></argsstring>
        <name>myPublicV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the blank public key of <computeroutput>myPrivateV</computeroutput>. The keying material will be written to the buffer specified in the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> and keying material may be deleted or go out of scope after generating the hash and sending <computeroutput>myPublicV2</computeroutput> to the other party with the rest of the parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="993" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="993" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Struct containing the parameters required to generate the second round keys. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="405">
        <label>CryptoKey</label>
        <link refid="struct_crypto_key"/>
        <childnode refid="406" relation="usage">
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="407" relation="usage">
          <edgelabel>keyStore</edgelabel>
        </childnode>
        <childnode refid="408" relation="usage">
          <edgelabel>keyBlob</edgelabel>
        </childnode>
      </node>
      <node id="403">
        <label>ECCParams_CurveParams</label>
        <link refid="struct_e_c_c_params___curve_params"/>
        <childnode refid="404" relation="usage">
          <edgelabel>g</edgelabel>
          <edgelabel>precomputed</edgelabel>
          <edgelabel>generator</edgelabel>
          <edgelabel>t</edgelabel>
        </childnode>
      </node>
      <node id="404">
        <label>ECCParams_ECCPoint</label>
        <link refid="struct_e_c_c_params___e_c_c_point"/>
      </node>
      <node id="406">
        <label>CryptoKey_Plaintext</label>
        <link refid="struct_crypto_key___plaintext"/>
      </node>
      <node id="408">
        <label>CryptoKey_KeyBlob</label>
        <link refid="struct_crypto_key___key_blob"/>
      </node>
      <node id="402">
        <label>ECJPAKE_OperationRoundTwoGenerateKeys</label>
        <link refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys"/>
        <childnode refid="403" relation="usage">
          <edgelabel>curve</edgelabel>
        </childnode>
        <childnode refid="405" relation="usage">
          <edgelabel>myNewGenerator</edgelabel>
          <edgelabel>myPublicKey1</edgelabel>
          <edgelabel>theirPublicKey1</edgelabel>
          <edgelabel>myPublicKey2</edgelabel>
          <edgelabel>theirPublicKey2</edgelabel>
          <edgelabel>myPrivateV</edgelabel>
          <edgelabel>myCombinedPublicKey</edgelabel>
          <edgelabel>myCombinedPrivateKey</edgelabel>
          <edgelabel>myPrivateKey2</edgelabel>
          <edgelabel>theirNewGenerator</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="407">
        <label>CryptoKey_KeyStore</label>
        <link refid="struct_crypto_key___key_store"/>
      </node>
    </collaborationgraph>
    <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" line="935" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECJPAKE.h" bodystart="935" bodyend="1002"/>
    <listofallmembers>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a70378dcb290f2d4032d667bb37975ab8" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>curve</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1ae3b22eb15838cffb4469dae238bd103f" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myCombinedPrivateKey</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a5be4dc8d025e3f195b9ca9467d891e2f" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myCombinedPublicKey</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aad7c70af8f88da28262eae66c2606196" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myNewGenerator</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a9e7e5b0765e81c7b8021242dae006231" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myPrivateKey2</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aeb7a4d170ee355be0201d4b246a73a88" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myPrivateV</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a2a9a1eff4321e488d979b01b69a4c5ca" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myPublicKey1</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1ad67d4498895c39c520fc89af43411cbd" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myPublicKey2</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a8d31da90d614deb245c6ef35ab9ea795" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>myPublicV</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1af056028d0089252d89d1413e9950e39c" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>preSharedSecret</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a79021d246ce8e6603f987502e1c306d1" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>theirNewGenerator</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1aa56b66dd17b7788d4a092c08c0fc526d" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>theirPublicKey1</name></member>
      <member refid="struct_e_c_j_p_a_k_e___operation_round_two_generate_keys_1a7b26f89a9ff6c4991231cacfa2834fb5" prot="public" virt="non-virtual"><scope>ECJPAKE_OperationRoundTwoGenerateKeys</scope><name>theirPublicKey2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
