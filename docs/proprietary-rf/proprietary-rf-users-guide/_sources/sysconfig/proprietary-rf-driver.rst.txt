.. _sysconfig-radio-configuration:

Radio Configuration
===================

You can use :term:`SysConfig` to configure the radio settings. E.g. if you are
using an RF Driver project or an EasyLink project, you can use the Custom RF 
Stack SysConfig view to add settings to ``ti_radio_config.c/h``. It is also
possible to `SmartRF Studio`_ to configure the RF settings. In this case you
will get files named ``smartrf_settings.c/h``, corresponding to the
``ti_radio_config.c/h`` files generated by SysConfig.

Most configurable parameters in the Custom RF Stack view are also found as a
configurable parameter in SmartRF Studio. If there is a specific parameter you
need documentation about, please check SmartRF Studio or in the |TRM|.

In the following sections, rfPacketTx is used as the example, but the
instructions are valid for any example project that uses
``smartrf_settings.c/h`` to configure the RF settings.

.. note::

    Custom RF Stack configuration in SysConfig will only make changes to
    ``ti_radio_config.c/h``. Any required changes to your application files
    you must do on your own.


Open An Example Project
-----------------------

Open the standalone SysConfig tool or a SysConfig-enabled example project.

Open the ``.syscfg`` file.


Adding RF Settings
------------------

In the RF STACKS view, you can add sets of settings for multiple RF stacks. If
you're not using one of the RF stacks, you can use the Custom option to add a
direct configuration of the Smartrf Settings (``ti_radio_config.c/h``).
Press the Plus sign next to Custom to add a configuration.


When you open the Custom RF Stack view you will see that the RF settings are
divided into modes; Proprietary mode for the 431 - 527 MHz band, Proprietary
mode for the  799 - 930 MHz band, BLE mode, IEEE 802.15.4 mode. You can have
multiple sets of RF settings defined simultaneously.

.. figure:: resources/ccs_syscfg.png
    :align: center

#. **Add RF Mode**

    Add at least one set of RF Settings in the Custom RF Stacks view. For each
    mode, you will have to choose the PHY type. Each time an RF Settings mode
    is added, a box will appear in SysConfig that will allow you to configure
    the chosen PHY.

#. **Choose PHY Type**

    You can choose a pre-configured PHY type, or choose Custom PHY Setting.
    Each time an RF Settings mode is added, a box will appear in SysConfig
    that will allow you to configure the chosen PHY. You can have one or more
    PHY settings for each RF mode.

    .. figure:: resources/phy_type.png
        :align: center


#. **Name the Set of RF Settings**

    Each set of RF Settings must have a name, which is used when generating
    every RF driver command. Two different sets of RF Settings can not have
    the same name. Scroll down to Code Export Configuration and select the
    desired Symbol Name Generation Method:

    * Legacy - Bare-bones names are generated. You can only have one set of RF
      Settings with the Legacy name.
    * Automatic - Each object will be given the selected PHY as a suffix.
    * Custom - You can configure the name as you like.

    You can see the generated names in the RF Command Symbols and Other Symbols 
    tabs.

    .. figure:: resources/code_export_config.png
        :align: center


#. **Set the PHY Properties**

    (For BLE and IEEE 802.15.4 settings you will not get this tab.) In the PHY 
    Properties tab you can set basic properties such as frequency and 
    Tx Power to use, and settings related to packet format such as the sync word.

    Each parameter is more thoroughly explained if you press the small circle
    with a question mark next to the parameter name.

    Make sure your settings make sense from an RF point of view. Certain parameter
    combinations will give you a build error. Other will give you a hint to a
    file where you need to change a different parameter based on your SysConfig
    parameters. In this case, make sure to comply (as SysConfig will not make
    this change for you).

    .. figure:: resources/phy_properties.png
        :align: center

#. **Set the Link Layer Options**

    (For BLE and IEEE 802.15.4 settings you will not get this tab.) In the Link Layer 
    tab you can set packet parameters such as packet length and Rx address to 
    filter on.

#. **The Other Dependencies Tab**

    In this tab you can configure options that are defined outside of the RF 
    STACKS view in SysConfig. E.g. the RF Driver is found under the TI DRIVERS 
    view. If you change the RF Driver settings here, you will see your changes 
    reflected in the TI DRIVERS view.

#. **Save the** ``.syscfg`` **file.**

#. **Generate the files**

    You can see the generated files by clicking the ``<>`` symbol. In this
    example, ``ti_drivers_config.c/h`` was generated by the "TI Drivers" view
    and ``ti_radio_config.c/h`` was generated by the "RF Stacks" view. In
    addition, ``ti_devices_config.c`` (previously called ``ccfg.c``) and
    ``syscfg_c.rov.xs`` are generated. 


    .. figure:: resources/generated_files_prop.png
        :align: center

    After the build has completed, you will find the generated files in the 
    output folder of your project. In this example, it's the folder called 
    "Debug" of the rfPacketTx example.

    .. figure:: resources/generated_folder_prop.png
        :align: center

    The Radio Settings are shown separately in the generated
    ``ti_radio_config.c`` file. In this example, one set of RF Settings was
    added. These settings are found under a ``RF Setting`` header.

    .. code-block:: c
        :caption: **ti_radio_config.h** - RF Setting Header

        //*********************************************************************************
        //  RF Setting:   50 kbps, 2-GFSK, 25 kHz deviation
        //
        //  PHY:          2gfsk50kbps     
        //  Setting file: setting_tc106.json
        //*********************************************************************************

#. **Adjust Your Application Files**

    The names of RF objects have been generated according to the naming rules
    chosen in Code Export Configuration. Make sure your application is using the
    correct name whenever an RF object is used.

    In this example, RF objects are only called from ``rfPacketTx.c``. For each
    RF object, make sure the name is correct according to the RF Settings you
    have generated. This is also valid if your application uses multiple sets of RF
    Settings. Use build errors and warnings to make sure you are using the
    correct names.

    .. attention::

        Whenever you re-build the project, SysConfig will re-generate the files.
        Because of this, any changes made directly in the files
        (``smartrf_settings.c/h``) will be overwritten and lost.

